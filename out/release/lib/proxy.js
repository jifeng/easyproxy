// Generated by CoffeeScript 1.6.2
var COLON, ENTER, NEWLINE, Proxy, SPACE, events, getHead, net, status404Line,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

net = require('net');

events = require('events');

status404Line = 'HTTP/1.10x204040x20Not Found\r\n';

SPACE = 0x20;

COLON = 0x3a;

NEWLINE = 0x0a;

ENTER = 0x0d;

getHead = function(data) {
  var firstLineCount, firstLineStart, header, hi, hk, i, key, lineCount, lineStart, start, value, valueStart, _i, _j, _len, _len1, _ref;

  start = 0;
  lineStart = 0;
  lineCount = 0;
  header = {};
  firstLineCount = 0;
  firstLineStart = 0;
  for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
    value = data[i];
    if (value === ENTER && data[i + 1] === NEWLINE) {
      if (data[i + 2] === ENTER && data[i + 3] === NEWLINE) {
        return;
      }
      lineCount++;
      lineStart = i + 2;
    } else {
      if (lineCount === 0) {
        if (value === SPACE) {
          if ((++firstLineCount) === 2) {
            header.url = data.toString('ascii', firstLineStart + 1, i);
          }
          firstLineStart = i;
        }
      } else {
        if (value === COLON && data[i + 1] === SPACE) {
          key = data.toString('ascii', lineStart, i).toLowerCase();
          if (key === 'host') {
            _ref = data.slice(i + 2);
            for (hi = _j = 0, _len1 = _ref.length; _j < _len1; hi = ++_j) {
              hk = _ref[hi];
              if (hk === ENTER) {
                header[key] = data.toString('ascii', i + 2, i + 2 + hi).trim().toLowerCase();
                return header;
              }
            }
          }
          valueStart = i + 2;
        }
      }
    }
  }
};

Proxy = (function(_super) {
  __extends(Proxy, _super);

  function Proxy(options) {
    var _this = this;

    this.options = options || {};
    this.apps = this.options.apps || [];
    this.server = net.createServer(function(c) {
      var first, socket;

      first = true;
      socket = null;
      c.on('data', function(data) {
        var header, path;

        header = getHead(data);
        if (first === true && socket === null) {
          first = false;
          path = _this._find(header);
          if (path === void 0) {
            c.write(new Buffer(status404Line));
            return c.end();
          }
          socket = net.connect(path, function() {
            return socket.pipe(c);
          });
        }
        if (socket !== null) {
          return socket.write(data);
        }
      });
      return c.on('end', function() {
        if (socket !== null) {
          return socket.end();
        }
      });
    });
  }

  Proxy.prototype.register = function(app, cb) {
    var flag, value, _i, _len, _ref;

    flag = true;
    app = app || {};
    _ref = this.apps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      value = _ref[_i];
      if (value.host === app.host && value.prefix === app.prefix && value.path === app.path) {
        flag = false;
      }
    }
    app.status = 'on';
    if (flag === true) {
      this.apps.push(app);
    }
    return cb && cb();
  };

  Proxy.prototype.unregister = function(app, cb) {
    var value, _i, _len, _ref;

    app = app || {};
    _ref = this.apps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      value = _ref[_i];
      if (value.host === app.host && value.prefix === app.prefix && value.path === app.path) {
        value.status = 'off';
      }
    }
    return cb && cb();
  };

  Proxy.prototype._find = function(head) {
    var value, _i, _len, _ref;

    _ref = this.apps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      value = _ref[_i];
      if (value.status === 'on') {
        if (head.host.indexOf(value.host) > 0 || head.url.indexOf(value.prefix) === 0) {
          return value.path;
        }
      }
    }
  };

  Proxy.prototype.listen = function(port, cb) {
    return this.server.listen(port, cb);
  };

  Proxy.prototype.close = function() {
    return this.server.close();
  };

  return Proxy;

})(events.EventEmitter);

module.exports = function(options) {
  return new Proxy(options);
};
